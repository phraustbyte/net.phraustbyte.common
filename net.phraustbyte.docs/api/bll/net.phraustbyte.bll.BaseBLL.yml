### YamlMime:ManagedReference
items:
- uid: net.phraustbyte.bll.BaseBLL
  commentId: T:net.phraustbyte.bll.BaseBLL
  id: BaseBLL
  parent: net.phraustbyte.bll
  children:
  - net.phraustbyte.bll.BaseBLL.Active
  - net.phraustbyte.bll.BaseBLL.Changer
  - net.phraustbyte.bll.BaseBLL.Create``1
  - net.phraustbyte.bll.BaseBLL.CreatedDate
  - net.phraustbyte.bll.BaseBLL.DAL
  - net.phraustbyte.bll.BaseBLL.Delete
  - net.phraustbyte.bll.BaseBLL.Id
  - net.phraustbyte.bll.BaseBLL.Read``1(System.Guid)
  - net.phraustbyte.bll.BaseBLL.ReadAll``1
  - net.phraustbyte.bll.BaseBLL.ReadAllByFilter``2(``1,System.String)
  - net.phraustbyte.bll.BaseBLL.Update
  langs:
  - csharp
  - vb
  name: BaseBLL
  nameWithType: BaseBLL
  fullName: net.phraustbyte.bll.BaseBLL
  type: Class
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: BaseBLL
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 11
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nRepresents the base BLL object\n"
  example: []
  syntax:
    content: 'public abstract class BaseBLL : IBaseBLL'
    content.vb: >-
      Public MustInherit Class BaseBLL
          Implements IBaseBLL
  inheritance:
  - System.Object
  implements:
  - net.phraustbyte.bll.IBaseBLL
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: net.phraustbyte.bll.BaseBLL.Id
  commentId: P:net.phraustbyte.bll.BaseBLL.Id
  id: Id
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: BaseBLL.Id
  fullName: net.phraustbyte.bll.BaseBLL.Id
  type: Property
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Id
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 16
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nInteger Identifier\n"
  example: []
  syntax:
    content: public Guid Id { get; set; }
    parameters: []
    return:
      type: System.Guid
    content.vb: Public Property Id As Guid
  overload: net.phraustbyte.bll.BaseBLL.Id*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Id
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: net.phraustbyte.bll.BaseBLL.CreatedDate
  commentId: P:net.phraustbyte.bll.BaseBLL.CreatedDate
  id: CreatedDate
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: CreatedDate
  nameWithType: BaseBLL.CreatedDate
  fullName: net.phraustbyte.bll.BaseBLL.CreatedDate
  type: Property
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: CreatedDate
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 21
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nDate/Time the record was created\n"
  example: []
  syntax:
    content: public DateTime CreatedDate { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property CreatedDate As Date
  overload: net.phraustbyte.bll.BaseBLL.CreatedDate*
  implements:
  - net.phraustbyte.bll.IBaseBLL.CreatedDate
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: net.phraustbyte.bll.BaseBLL.Changer
  commentId: P:net.phraustbyte.bll.BaseBLL.Changer
  id: Changer
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Changer
  nameWithType: BaseBLL.Changer
  fullName: net.phraustbyte.bll.BaseBLL.Changer
  type: Property
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Changer
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 25
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nChanger of the record\n"
  example: []
  syntax:
    content: public string Changer { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Changer As String
  overload: net.phraustbyte.bll.BaseBLL.Changer*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Changer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: net.phraustbyte.bll.BaseBLL.Active
  commentId: P:net.phraustbyte.bll.BaseBLL.Active
  id: Active
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Active
  nameWithType: BaseBLL.Active
  fullName: net.phraustbyte.bll.BaseBLL.Active
  type: Property
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Active
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 29
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nActive Flag\n"
  example: []
  syntax:
    content: public bool Active { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Active As Boolean
  overload: net.phraustbyte.bll.BaseBLL.Active*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Active
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: net.phraustbyte.bll.BaseBLL.DAL
  commentId: P:net.phraustbyte.bll.BaseBLL.DAL
  id: DAL
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: DAL
  nameWithType: BaseBLL.DAL
  fullName: net.phraustbyte.bll.BaseBLL.DAL
  type: Property
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: DAL
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 33
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nrepresents the DAL\n"
  example: []
  syntax:
    content: protected abstract IBaseDAL DAL { get; }
    parameters: []
    return:
      type: net.phraustbyte.dal.IBaseDAL
    content.vb: Protected MustOverride ReadOnly Property DAL As IBaseDAL
  overload: net.phraustbyte.bll.BaseBLL.DAL*
  modifiers.csharp:
  - protected
  - abstract
  - get
  modifiers.vb:
  - Protected
  - MustOverride
  - ReadOnly
- uid: net.phraustbyte.bll.BaseBLL.Create``1
  commentId: M:net.phraustbyte.bll.BaseBLL.Create``1
  id: Create``1
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Create<T>()
  nameWithType: BaseBLL.Create<T>()
  fullName: net.phraustbyte.bll.BaseBLL.Create<T>()
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Create
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 40
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nCreates a record\n"
  example: []
  syntax:
    content: public abstract Task<Guid> Create<T>()
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Guid}
      description: ''
    content.vb: Public MustOverride Function Create(Of T) As Task(Of Guid)
  overload: net.phraustbyte.bll.BaseBLL.Create*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Create``1
  nameWithType.vb: BaseBLL.Create(Of T)()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: net.phraustbyte.bll.BaseBLL.Create(Of T)()
  name.vb: Create(Of T)()
- uid: net.phraustbyte.bll.BaseBLL.Delete
  commentId: M:net.phraustbyte.bll.BaseBLL.Delete
  id: Delete
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: BaseBLL.Delete()
  fullName: net.phraustbyte.bll.BaseBLL.Delete()
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Delete
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 45
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nDeletes a record\n"
  example: []
  syntax:
    content: public abstract Task Delete()
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public MustOverride Function Delete As Task
  overload: net.phraustbyte.bll.BaseBLL.Delete*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Delete
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: net.phraustbyte.bll.BaseBLL.Read``1(System.Guid)
  commentId: M:net.phraustbyte.bll.BaseBLL.Read``1(System.Guid)
  id: Read``1(System.Guid)
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Read<T>(Guid)
  nameWithType: BaseBLL.Read<T>(Guid)
  fullName: net.phraustbyte.bll.BaseBLL.Read<T>(System.Guid)
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Read
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 52
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nReads a record by identifier\n"
  example: []
  syntax:
    content: >-
      public abstract Task<T> Read<T>(Guid Id)
          where T : IBaseBLL, new()
    parameters:
    - id: Id
      type: System.Guid
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Public MustOverride Function Read(Of T As {IBaseBLL, New})(Id As Guid) As Task(Of T)
  overload: net.phraustbyte.bll.BaseBLL.Read*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Read``1(System.Guid)
  nameWithType.vb: BaseBLL.Read(Of T)(Guid)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: net.phraustbyte.bll.BaseBLL.Read(Of T)(System.Guid)
  name.vb: Read(Of T)(Guid)
- uid: net.phraustbyte.bll.BaseBLL.ReadAll``1
  commentId: M:net.phraustbyte.bll.BaseBLL.ReadAll``1
  id: ReadAll``1
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: ReadAll<T>()
  nameWithType: BaseBLL.ReadAll<T>()
  fullName: net.phraustbyte.bll.BaseBLL.ReadAll<T>()
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: ReadAll
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 58
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nReads all records\n"
  example: []
  syntax:
    content: >-
      public abstract Task<List<T>> ReadAll<T>()
          where T : IBaseBLL, new()
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: ''
    content.vb: Public MustOverride Function ReadAll(Of T As {IBaseBLL, New}) As Task(Of List(Of T))
  overload: net.phraustbyte.bll.BaseBLL.ReadAll*
  implements:
  - net.phraustbyte.bll.IBaseBLL.ReadAll``1
  nameWithType.vb: BaseBLL.ReadAll(Of T)()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: net.phraustbyte.bll.BaseBLL.ReadAll(Of T)()
  name.vb: ReadAll(Of T)()
- uid: net.phraustbyte.bll.BaseBLL.Update
  commentId: M:net.phraustbyte.bll.BaseBLL.Update
  id: Update
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: Update()
  nameWithType: BaseBLL.Update()
  fullName: net.phraustbyte.bll.BaseBLL.Update()
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: Update
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 63
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nUpdates a record\n"
  example: []
  syntax:
    content: public abstract Task Update()
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public MustOverride Function Update As Task
  overload: net.phraustbyte.bll.BaseBLL.Update*
  implements:
  - net.phraustbyte.bll.IBaseBLL.Update
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: net.phraustbyte.bll.BaseBLL.ReadAllByFilter``2(``1,System.String)
  commentId: M:net.phraustbyte.bll.BaseBLL.ReadAllByFilter``2(``1,System.String)
  id: ReadAllByFilter``2(``1,System.String)
  parent: net.phraustbyte.bll.BaseBLL
  langs:
  - csharp
  - vb
  name: ReadAllByFilter<TOut, TParam>(TParam, String)
  nameWithType: BaseBLL.ReadAllByFilter<TOut, TParam>(TParam, String)
  fullName: net.phraustbyte.bll.BaseBLL.ReadAllByFilter<TOut, TParam>(TParam, System.String)
  type: Method
  source:
    remote:
      path: net.phraustbyte.bll/BaseBLL.cs
      branch: master
      repo: https://github.com/phraustbyte/net.phraustbyte.common.git
    id: ReadAllByFilter
    path: ../net.phraustbyte.bll/BaseBLL.cs
    startLine: 72
  assemblies:
  - net.phraustbyte.bll
  namespace: net.phraustbyte.bll
  summary: "\nReads all records by a filter\n"
  example: []
  syntax:
    content: >-
      public abstract Task<List<TOut>> ReadAllByFilter<TOut, TParam>(TParam FilterValue, string FilterKey)
          where TOut : new()
    parameters:
    - id: FilterValue
      type: '{TParam}'
      description: ''
    - id: FilterKey
      type: System.String
      description: ''
    typeParameters:
    - id: TOut
      description: ''
    - id: TParam
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{TOut}}}
      description: ''
    content.vb: Public MustOverride Function ReadAllByFilter(Of TOut As New, TParam)(FilterValue As TParam, FilterKey As String) As Task(Of List(Of TOut))
  overload: net.phraustbyte.bll.BaseBLL.ReadAllByFilter*
  implements:
  - net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2({TParam},System.String)
  nameWithType.vb: BaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: net.phraustbyte.bll.BaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, System.String)
  name.vb: ReadAllByFilter(Of TOut, TParam)(TParam, String)
references:
- uid: net.phraustbyte.bll
  commentId: N:net.phraustbyte.bll
  name: net.phraustbyte.bll
  nameWithType: net.phraustbyte.bll
  fullName: net.phraustbyte.bll
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: net.phraustbyte.bll.IBaseBLL
  commentId: T:net.phraustbyte.bll.IBaseBLL
  parent: net.phraustbyte.bll
  name: IBaseBLL
  nameWithType: IBaseBLL
  fullName: net.phraustbyte.bll.IBaseBLL
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: net.phraustbyte.bll.BaseBLL.Id*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Id
  name: Id
  nameWithType: BaseBLL.Id
  fullName: net.phraustbyte.bll.BaseBLL.Id
- uid: net.phraustbyte.bll.IBaseBLL.Id
  commentId: P:net.phraustbyte.bll.IBaseBLL.Id
  parent: net.phraustbyte.bll.IBaseBLL
  name: Id
  nameWithType: IBaseBLL.Id
  fullName: net.phraustbyte.bll.IBaseBLL.Id
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: net.phraustbyte.bll.BaseBLL.CreatedDate*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.CreatedDate
  name: CreatedDate
  nameWithType: BaseBLL.CreatedDate
  fullName: net.phraustbyte.bll.BaseBLL.CreatedDate
- uid: net.phraustbyte.bll.IBaseBLL.CreatedDate
  commentId: P:net.phraustbyte.bll.IBaseBLL.CreatedDate
  parent: net.phraustbyte.bll.IBaseBLL
  name: CreatedDate
  nameWithType: IBaseBLL.CreatedDate
  fullName: net.phraustbyte.bll.IBaseBLL.CreatedDate
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: net.phraustbyte.bll.BaseBLL.Changer*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Changer
  name: Changer
  nameWithType: BaseBLL.Changer
  fullName: net.phraustbyte.bll.BaseBLL.Changer
- uid: net.phraustbyte.bll.IBaseBLL.Changer
  commentId: P:net.phraustbyte.bll.IBaseBLL.Changer
  parent: net.phraustbyte.bll.IBaseBLL
  name: Changer
  nameWithType: IBaseBLL.Changer
  fullName: net.phraustbyte.bll.IBaseBLL.Changer
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: net.phraustbyte.bll.BaseBLL.Active*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Active
  name: Active
  nameWithType: BaseBLL.Active
  fullName: net.phraustbyte.bll.BaseBLL.Active
- uid: net.phraustbyte.bll.IBaseBLL.Active
  commentId: P:net.phraustbyte.bll.IBaseBLL.Active
  parent: net.phraustbyte.bll.IBaseBLL
  name: Active
  nameWithType: IBaseBLL.Active
  fullName: net.phraustbyte.bll.IBaseBLL.Active
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: net.phraustbyte.bll.BaseBLL.DAL*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.DAL
  name: DAL
  nameWithType: BaseBLL.DAL
  fullName: net.phraustbyte.bll.BaseBLL.DAL
- uid: net.phraustbyte.dal.IBaseDAL
  commentId: T:net.phraustbyte.dal.IBaseDAL
  parent: net.phraustbyte.dal
  isExternal: true
  name: IBaseDAL
  nameWithType: IBaseDAL
  fullName: net.phraustbyte.dal.IBaseDAL
- uid: net.phraustbyte.dal
  commentId: N:net.phraustbyte.dal
  isExternal: true
  name: net.phraustbyte.dal
  nameWithType: net.phraustbyte.dal
  fullName: net.phraustbyte.dal
- uid: net.phraustbyte.bll.BaseBLL.Create*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Create
  name: Create
  nameWithType: BaseBLL.Create
  fullName: net.phraustbyte.bll.BaseBLL.Create
- uid: net.phraustbyte.bll.IBaseBLL.Create``1
  commentId: M:net.phraustbyte.bll.IBaseBLL.Create``1
  parent: net.phraustbyte.bll.IBaseBLL
  name: Create<T>()
  nameWithType: IBaseBLL.Create<T>()
  fullName: net.phraustbyte.bll.IBaseBLL.Create<T>()
  nameWithType.vb: IBaseBLL.Create(Of T)()
  fullName.vb: net.phraustbyte.bll.IBaseBLL.Create(Of T)()
  name.vb: Create(Of T)()
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.Create``1
    name: Create<T>
    nameWithType: IBaseBLL.Create<T>
    fullName: net.phraustbyte.bll.IBaseBLL.Create<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.Create``1
    name: Create(Of T)
    nameWithType: IBaseBLL.Create(Of T)
    fullName: net.phraustbyte.bll.IBaseBLL.Create(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Guid}
  commentId: T:System.Threading.Tasks.Task{System.Guid}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Guid>
  nameWithType: Task<Guid>
  fullName: System.Threading.Tasks.Task<System.Guid>
  nameWithType.vb: Task(Of Guid)
  fullName.vb: System.Threading.Tasks.Task(Of System.Guid)
  name.vb: Task(Of Guid)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: net.phraustbyte.bll.BaseBLL.Delete*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Delete
  name: Delete
  nameWithType: BaseBLL.Delete
  fullName: net.phraustbyte.bll.BaseBLL.Delete
- uid: net.phraustbyte.bll.IBaseBLL.Delete
  commentId: M:net.phraustbyte.bll.IBaseBLL.Delete
  parent: net.phraustbyte.bll.IBaseBLL
  name: Delete()
  nameWithType: IBaseBLL.Delete()
  fullName: net.phraustbyte.bll.IBaseBLL.Delete()
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.Delete
    name: Delete
    nameWithType: IBaseBLL.Delete
    fullName: net.phraustbyte.bll.IBaseBLL.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.Delete
    name: Delete
    nameWithType: IBaseBLL.Delete
    fullName: net.phraustbyte.bll.IBaseBLL.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: net.phraustbyte.bll.BaseBLL.Read*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Read
  name: Read
  nameWithType: BaseBLL.Read
  fullName: net.phraustbyte.bll.BaseBLL.Read
- uid: net.phraustbyte.bll.IBaseBLL.Read``1(System.Guid)
  commentId: M:net.phraustbyte.bll.IBaseBLL.Read``1(System.Guid)
  parent: net.phraustbyte.bll.IBaseBLL
  isExternal: true
  name: Read<T>(Guid)
  nameWithType: IBaseBLL.Read<T>(Guid)
  fullName: net.phraustbyte.bll.IBaseBLL.Read<T>(System.Guid)
  nameWithType.vb: IBaseBLL.Read(Of T)(Guid)
  fullName.vb: net.phraustbyte.bll.IBaseBLL.Read(Of T)(System.Guid)
  name.vb: Read(Of T)(Guid)
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.Read``1(System.Guid)
    name: Read<T>
    nameWithType: IBaseBLL.Read<T>
    fullName: net.phraustbyte.bll.IBaseBLL.Read<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.Read``1(System.Guid)
    name: Read(Of T)
    nameWithType: IBaseBLL.Read(Of T)
    fullName: net.phraustbyte.bll.IBaseBLL.Read(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: net.phraustbyte.bll.BaseBLL.ReadAll*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.ReadAll
  name: ReadAll
  nameWithType: BaseBLL.ReadAll
  fullName: net.phraustbyte.bll.BaseBLL.ReadAll
- uid: net.phraustbyte.bll.IBaseBLL.ReadAll``1
  commentId: M:net.phraustbyte.bll.IBaseBLL.ReadAll``1
  parent: net.phraustbyte.bll.IBaseBLL
  name: ReadAll<T>()
  nameWithType: IBaseBLL.ReadAll<T>()
  fullName: net.phraustbyte.bll.IBaseBLL.ReadAll<T>()
  nameWithType.vb: IBaseBLL.ReadAll(Of T)()
  fullName.vb: net.phraustbyte.bll.IBaseBLL.ReadAll(Of T)()
  name.vb: ReadAll(Of T)()
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAll``1
    name: ReadAll<T>
    nameWithType: IBaseBLL.ReadAll<T>
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAll<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAll``1
    name: ReadAll(Of T)
    nameWithType: IBaseBLL.ReadAll(Of T)
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAll(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: net.phraustbyte.bll.BaseBLL.Update*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.Update
  name: Update
  nameWithType: BaseBLL.Update
  fullName: net.phraustbyte.bll.BaseBLL.Update
- uid: net.phraustbyte.bll.IBaseBLL.Update
  commentId: M:net.phraustbyte.bll.IBaseBLL.Update
  parent: net.phraustbyte.bll.IBaseBLL
  name: Update()
  nameWithType: IBaseBLL.Update()
  fullName: net.phraustbyte.bll.IBaseBLL.Update()
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.Update
    name: Update
    nameWithType: IBaseBLL.Update
    fullName: net.phraustbyte.bll.IBaseBLL.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.Update
    name: Update
    nameWithType: IBaseBLL.Update
    fullName: net.phraustbyte.bll.IBaseBLL.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: net.phraustbyte.bll.BaseBLL.ReadAllByFilter*
  commentId: Overload:net.phraustbyte.bll.BaseBLL.ReadAllByFilter
  name: ReadAllByFilter
  nameWithType: BaseBLL.ReadAllByFilter
  fullName: net.phraustbyte.bll.BaseBLL.ReadAllByFilter
- uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2({TParam},System.String)
  commentId: M:net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
  parent: net.phraustbyte.bll.IBaseBLL
  definition: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
  name: ReadAllByFilter<TOut, TParam>(TParam, String)
  nameWithType: IBaseBLL.ReadAllByFilter<TOut, TParam>(TParam, String)
  fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter<TOut, TParam>(TParam, System.String)
  nameWithType.vb: IBaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, String)
  fullName.vb: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, System.String)
  name.vb: ReadAllByFilter(Of TOut, TParam)(TParam, String)
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
    name: ReadAllByFilter<TOut, TParam>
    nameWithType: IBaseBLL.ReadAllByFilter<TOut, TParam>
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter<TOut, TParam>
  - name: (
    nameWithType: (
    fullName: (
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
    name: ReadAllByFilter(Of TOut, TParam)
    nameWithType: IBaseBLL.ReadAllByFilter(Of TOut, TParam)
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter(Of TOut, TParam)
  - name: (
    nameWithType: (
    fullName: (
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TParam}'
  commentId: '!:TParam'
  definition: TParam
  name: TParam
  nameWithType: TParam
  fullName: TParam
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{TOut}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<TOut>>
  nameWithType: Task<List<TOut>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<TOut>>
  nameWithType.vb: Task(Of List(Of TOut))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of TOut))
  name.vb: Task(Of List(Of TOut))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TOut
    nameWithType: TOut
    fullName: TOut
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
  commentId: M:net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
  isExternal: true
  name: ReadAllByFilter<TOut, TParam>(TParam, String)
  nameWithType: IBaseBLL.ReadAllByFilter<TOut, TParam>(TParam, String)
  fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter<TOut, TParam>(TParam, System.String)
  nameWithType.vb: IBaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, String)
  fullName.vb: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter(Of TOut, TParam)(TParam, System.String)
  name.vb: ReadAllByFilter(Of TOut, TParam)(TParam, String)
  spec.csharp:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
    name: ReadAllByFilter<TOut, TParam>
    nameWithType: IBaseBLL.ReadAllByFilter<TOut, TParam>
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter<TOut, TParam>
  - name: (
    nameWithType: (
    fullName: (
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter``2(``1,System.String)
    name: ReadAllByFilter(Of TOut, TParam)
    nameWithType: IBaseBLL.ReadAllByFilter(Of TOut, TParam)
    fullName: net.phraustbyte.bll.IBaseBLL.ReadAllByFilter(Of TOut, TParam)
  - name: (
    nameWithType: (
    fullName: (
  - name: TParam
    nameWithType: TParam
    fullName: TParam
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TParam
  name: TParam
  nameWithType: TParam
  fullName: TParam
